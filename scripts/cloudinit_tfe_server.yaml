#cloud-config
write_files:
  - path: /etc/replicated.conf
    permissions: '0640'
    content: |
      {
          "DaemonAuthenticationType":          "password",
          "DaemonAuthenticationPassword":      "${tfe_password}",
          "TlsBootstrapType":                  "self-signed",
          "TlsBootstrapHostname":              "${dns_hostname}.${dns_zonename}",
          "BypassPreflightChecks":             true,
          "ImportSettingsFrom":                "/tmp/tfe_settings.json",
          "LicenseFileLocation":               "/tmp/${filename_license}",
          "LicenseBootstrapAirgapPackagePath": "/tmp/${filename_airgap}"
      }
  - path: /tmp/tfe_settings.json
    permissions: '0640'
    content: |
      {
          "archivist_token" : {
            "value" : "${archivist_token}"
          },
         "enable_active_active" : {
          "value": "1"
         },
         "aws_instance_profile": {
              "value": "1"
          },
          "cookie_hash" : {
            "value" : "${cookie_hash}"
          },
          "enc_password": {
              "value": "${tfe_password}"
          },
          "hairpin_addressing": {
              "value": "1"
          },
          "hostname": {
              "value": "${dns_hostname}.${dns_zonename}"
          },
          "install_id" : {
            "value" : "${install_id}"
          },
          "internal_api_token" : {
           "value" : "${internal_api_token}"
          },
          "pg_dbname": {
              "value": "${pg_dbname}"
          },
          "pg_netloc": {
              "value": "${pg_address}"
          },
          "pg_password": {
              "value": "${rds_password}"
          },
          "pg_user": {
              "value": "postgres"
          },
          "placement": {
              "value": "placement_s3"
          },
          "production_type": {
              "value": "external"
          },
          "redis_host" : {
            "value": "${redis_server}"
          },
          "redis_port" : {
            "value": "6379"
          },
          "redis_use_password_auth" : {
            "value": "0"
          },
          "redis_use_tls" : {
            "value": "0"
          },
          "registry_session_encryption_key" : {
            "value" : "${registry_session_encryption_key}"
          },
          "registry_session_secret_key" : {
            "value" : "${registry_session_secret_key}"
          },
          "root_secret" : {
            "value" : "${root_secret}"
          },
          "s3_bucket": {
              "value": "${tfe_bucket}"
          },
          "s3_endpoint": {},
          "s3_region": {
              "value": "${region}"
          },
          "user_token" : {
            "value" : "${user_token}"
          }
      }   
  - path: /tmp/install_software.sh 
    permissions: '0750'
    content: |
      #!/usr/bin/env bash
      # installation script for software
      
      # wait until archive is available. Wait until there is internet before continue
      until ping -c1 archive.ubuntu.com &>/dev/null; do
        echo "waiting for networking to initialise"
        sleep 3 
      done 
      
      # install monitoring tools
      apt-get update
      apt-get install -y ctop net-tools sysstat jq      

      # add public ssh key alvaro
      curl -sL https://raw.githubusercontent.com/kikitux/curl-bash/master/provision/add_github_user_public_keys.sh | GITHUB_USER=kikitux bash
      
      # add public ssh key patrick
      curl -sL https://raw.githubusercontent.com/kikitux/curl-bash/master/provision/add_github_user_public_keys.sh | GITHUB_USER=munnep bash
      
      # Set swappiness
      if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
        echo never > /sys/kernel/mm/transparent_hugepage/enabled
      fi
      
      if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
        echo never > /sys/kernel/mm/transparent_hugepage/defrag
      fi
      
      # heavy swap vm.swappiness=80
      # no swap vm.swappiness=1

      echo vm.swappiness=1 >> /etc/sysctl.conf
      echo vm.min_free_kbytes=67584 >> /etc/sysctl.conf
      echo vm.drop_caches=1 >> /etc/sysctl.conf
      sysctl -p
      
      SWAP=/dev/$(lsblk|grep nvme | grep -v nvme0n1 |sort -k 4 | awk '{print $1}'| awk '(NR==1)')
      DOCKER=/dev/$(lsblk|grep nvme | grep -v nvme0n1 |sort -k 4 | awk '{print $1}'| awk '(NR==2)')
      
      echo $SWAP
      echo $DOCKER
      
      # swap
      # if SWAP exists
      # we format if no format
      if [ -b $SWAP ]; then
      	blkid $SWAP
      	if [ $? -ne 0 ]; then
      		mkswap $SWAP
      	fi
      fi
      
      # if SWAP not in fstab
      # we add it
      grep "swap" /etc/fstab
      if [ $? -ne 0 ]; then
        SWAP_UUID=`blkid $SWAP| awk '{print $2}'`
      	echo "$SWAP_UUID swap swap defaults 0 0" | tee -a /etc/fstab
      	swapon -a
      fi
      
      # docker
      # if DOCKER exists
      # we format if no format
      if [ -b $DOCKER ]; then
      	blkid $DOCKER
      	if [ $? -ne 0 ]; then
      		mkfs.xfs $DOCKER
      	fi
      fi
      
      # if DOCKER not in fstab
      # we add it
      grep "/var/lib/docker" /etc/fstab
      if [ $? -ne 0 ]; then
        DOCKER_UUID=`blkid $DOCKER| awk '{print $2}'`
      	echo "$DOCKER_UUID /var/lib/docker xfs defaults 0 0" | tee -a /etc/fstab
      	mkdir -p /var/lib/docker
      	mount -a
      fi
      
      # Netdata will be listening on port 19999
      curl -sL https://raw.githubusercontent.com/automodule/bash/main/install_netdata.sh | bash
      
      # install requirements for tfe
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update
      apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin
  - path: /tmp/download_and_unpack_software.sh 
    permissions: '0750'
    content: |
      #!/usr/bin/env bash

      # wait until archive is available. Wait until there is internet before continue
      until ping -c1 archive.ubuntu.com &>/dev/null; do
        echo "waiting for networking to initialise"
        sleep 3 
      done 
      
      # Download all the software and files needed
      apt-get update      
      apt-get -y install awscli
      aws s3 cp s3://${tag_prefix}-software/${filename_airgap} /tmp/${filename_airgap}
      aws s3 cp s3://${tag_prefix}-software/${filename_license} /tmp/${filename_license}
      aws s3 cp s3://${tag_prefix}-software/${filename_bootstrap} /tmp/${filename_bootstrap}
      
      # directory for decompress the file
      sudo mkdir -p /opt/tfe
      pushd /opt/tfe
      sudo tar xzf /tmp/replicated.tar.gz
  - path: /tmp/install_tfe.sh   
    permissions: '0750'
    content: |
      #!/usr/bin/env bash
      pushd /opt/tfe
      # Following manual:
      # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
      TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
      LOCAL_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/local-ipv4`
      sudo bash ./install.sh airgap private-address=$LOCAL_IP disable-replicated-ui
  - path: /tmp/tfe_initial_user.json
    permissions: '0755'
    content: |  
      {
          "username": "admin",
          "email": "${certificate_email}",
          "password": "${tfe_password}"
      }   
  - path: /tmp/tfe_create_organization.json
    permissions: '0755'
    content: |  
      {
          "data": {
              "type": "organizations",
              "attributes": {
                  "name": "test",
                  "email": "${certificate_email}"
              }
          }
      }   
  - path: /tmp/tfe_create_agent_pool.json
    permissions: '0755'
    content: |  
      {
          "data": {
              "type": "agent-pools",
              "attributes": {
                  "name": "test-pool",
                  "organization-scoped": true
              }
          }
      }  
  - path: /tmp/tfe_create_agent_token.json
    permissions: '0755'
    content: |  
      {
          "data": {
              "type": "authentication-tokens",
              "attributes": {
                  "description": "api"
              }
          }
      }
  - path: /tmp/tfe_create_workspace.json
    permissions: '0755'
    content: |  
      {
          "data": {
              "attributes": {
                  "name": "test-agent",
                  "execution-mode": "agent",
                  "agent-pool-id": "AGENT_POOL_ID_WILL_BE_PLACED_HERE",
                  "resource-count": 0,
                  "updated-at": "2017-11-29T19:18:09.976Z"
              }
          },
          "type": "workspaces"
      }  
  - path: /tmp/tfe_setup.sh
    permissions: '0777'
    content: |
      #!/usr/bin/env bash
      
      # needed when not using valid certificates
      # echo -n | openssl s_client -connect ${dns_hostname}.${dns_zonename}:443 | openssl x509 > tfe_certificate.crt
      # cp tfe_certificate.crt /usr/local/share/ca-certificates/
      # update-ca-certificates
      
      # We have to wait for TFE be fully functioning before we can continue
      while true; do
          if curl -I "https://${dns_hostname}.${dns_zonename}/admin" 2>&1 | grep -w "200\|301" ; 
          then
              echo "TFE is up and running"
              echo "Will continue in 1 minutes with the final steps"
              sleep 60
              break
          else
              echo "TFE is not available yet. Please wait..."
              sleep 60
          fi
      done
      
      # get the admin token you can user to create the first user
      # Create the first user called admin and get the token
      TOKEN=`curl --header "Content-Type: application/json" --request POST --data @/tmp/tfe_initial_user.json  --url https://${dns_hostname}.${dns_zonename}/admin/initial-admin-user?token=${user_token} | jq -r '.token' `
      echo TOKEN $TOKEN
      echo $TOKEN > /tmp/admin_token.txt

      ADMIN_TOKEN_SECRET=`aws secretsmanager get-secret-value --secret-id ${admin_token_secret} --region ${region}`
      if [ $? -ne 0 ]
      then
        aws secretsmanager put-secret-value --secret-id ${admin_token_secret} --region ${region} --secret-string $TOKEN  
      fi

      # create organization test
      curl \
        --header "Authorization: Bearer $TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --request POST \
        --data @/tmp/tfe_create_organization.json \
        https://${dns_hostname}.${dns_zonename}/api/v2/organizations
     
      # Create an agent pool
      export AGENT_POOL=`curl --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request POST --data @/tmp/tfe_create_agent_pool.json https://${dns_hostname}.${dns_zonename}/api/v2/organizations/test/agent-pools | jq -r '.data.relationships."authentication-tokens".links.related'`
      export AGENT_POOL_ID=`curl --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request GET https://${dns_hostname}.${dns_zonename}/api/v2/organizations/test/agent-pools | jq -r '.data[0].id'`
      
      # Create an agent token
      export AGENT_TOKEN=`curl --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request POST --data @/tmp/tfe_create_agent_token.json https://${dns_hostname}.${dns_zonename}/$AGENT_POOL | jq -r '.data.attributes.token'`
      echo $AGENT_TOKEN > /tmp/agent_token.txt
      
      AGENT_TOKEN_SECRET=`aws secretsmanager get-secret-value --secret-id ${agent_token_secret} --region ${region}`
      if [ $? -ne 0 ]
      then
        aws secretsmanager put-secret-value --secret-id ${agent_token_secret} --region ${region} --secret-string $AGENT_TOKEN  
      fi
      
      # Create a workspace
      sed -i "s/AGENT_POOL_ID_WILL_BE_PLACED_HERE/$AGENT_POOL_ID/g" /tmp/tfe_create_workspace.json 
      curl --header "Authorization: Bearer $TOKEN" --header "Content-Type: application/vnd.api+json" --request POST --data @/tmp/tfe_create_workspace.json https://${dns_hostname}.${dns_zonename}/api/v2/organizations/test/workspaces
runcmd:
  - sudo bash /tmp/install_software.sh 
  - sudo bash /tmp/download_and_unpack_software.sh 
  - sudo bash /tmp/install_tfe.sh 
  - sudo bash /tmp/tfe_setup.sh 
